{"ast":null,"code":"var _jsxFileName = \"/Users/dannyreed/Desktop/danny-react-resume/danny-react-resume/client/src/index.js\";\nimport React from 'react';\nimport App from './App';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport TopBar from \"./components/topbar/TopBar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Square(props) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: props.className,\n    onClick: props.onClick,\n    children: props.value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 7\n  }, this);\n}\n\n_c = Square;\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    let className = 'square';\n\n    if (!!this.props.winners && this.props.winners.indexOf(i) > -1) {\n      className += ' highlighted';\n    }\n\n    ;\n    return /*#__PURE__*/_jsxDEV(Square, {\n      value: this.props.squares[i],\n      onClick: () => this.props.onClick(i),\n      className: className\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this);\n  }\n\n  render() {\n    let board_size = 3;\n    let squares = [];\n\n    for (let i = 0; i < board_size; i++) {\n      let row = [];\n\n      for (let cnt = 0; cnt < 3; cnt++) {\n        row.push(this.renderSquare(i * board_size + cnt));\n      }\n\n      squares.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: row\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 19\n      }, this));\n    }\n\n    return squares;\n  }\n\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null),\n        move: null\n      }],\n      xIsNext: true,\n      stepNumber: 0,\n      isReversed: false,\n      isDraw: false\n    };\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0\n    });\n  }\n\n  toggleOrder() {\n    this.setState({\n      isReversed: !this.state.isReversed\n    });\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    const results = calculateWinner(current.squares);\n    let winner = null;\n    let winning_row = null;\n\n    if (results) {\n      winner = results['winner'];\n      winning_row = results['winning_row'];\n    }\n\n    if (squares[i] || winner) {\n      return;\n    }\n\n    if (squares[i]) {\n      this.setState({\n        draw: true\n      });\n    }\n\n    const row = Math.ceil((i + 1) / 3);\n    const col = i % 3 + 1;\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares,\n        move: col + ', ' + row\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const results = calculateWinner(current.squares);\n    const draw = this.state.isDraw;\n    let winner = null;\n    let winning_row = null;\n\n    if (results) {\n      winner = results['winner'];\n      winning_row = results['line'];\n    }\n\n    if (results) {\n      winner = calculateWinner(current.squares)['winner'];\n    }\n\n    const reversed = this.state.isReversed;\n    let status;\n\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else if (draw) {\n      status = 'Draw!';\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    const moves = history.map((step, move) => {\n      const desc = move ? 'Go to move #' + move : 'Go to game start';\n      let loc;\n\n      if (step.move) {\n        loc = 'Loc: ' + step.move;\n      }\n\n      let active;\n\n      if (this.state.stepNumber === move) {\n        active = 'active';\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: active,\n          onClick: () => this.jumpTo(move),\n          children: desc\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this), \"\\xA0 \", loc]\n      }, move, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this);\n    });\n\n    if (reversed) {\n      moves.reverse();\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-board\",\n        children: /*#__PURE__*/_jsxDEV(Board, {\n          squares: current.squares,\n          onClick: i => {\n            this.handleClick(i);\n          },\n          winners: winning_row\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: status\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n          children: moves\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.toggleOrder(),\n          children: \"Re-order\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this);\n  }\n\n} // ========================================\n\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 174,\n  columnNumber: 3\n}, this), document.getElementById('root'));\n/*ReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);*/\n\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      let winning_results = {};\n      winning_results['winner'] = squares[a];\n      winning_results['line'] = lines[i];\n      return winning_results;\n    }\n  }\n\n  return null;\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Square\");","map":{"version":3,"sources":["/Users/dannyreed/Desktop/danny-react-resume/danny-react-resume/client/src/index.js"],"names":["React","App","ReactDOM","TopBar","Square","props","className","onClick","value","Board","Component","renderSquare","i","winners","indexOf","squares","render","board_size","row","cnt","push","Game","constructor","state","history","Array","fill","move","xIsNext","stepNumber","isReversed","isDraw","jumpTo","step","setState","toggleOrder","handleClick","slice","current","length","results","calculateWinner","winner","winning_row","draw","Math","ceil","col","concat","reversed","status","moves","map","desc","loc","active","reverse","document","getElementById","lines","a","b","c","winning_results"],"mappings":"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","sourcesContent":["import React from 'react';\nimport App from './App';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport TopBar from \"./components/topbar/TopBar\";\n\nfunction Square(props) {\n    return (\n      <button className={props.className} onClick={props.onClick}>\n        {props.value}\n      </button>\n    );\n}\n\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    let className = 'square';\n    if (!!this.props.winners && this.props.winners.indexOf(i) > -1) {\n      className += ' highlighted';\n    };\n    return (\n      <Square\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n        className={className}\n    />);\n  }\n\n  render() {\n    let board_size = 3;\n    let squares = [];\n    for (let i=0; i<board_size; i++) {\n     let row = [];\n     for (let cnt=0; cnt<3; cnt++) {\n       row.push(this.renderSquare(i * board_size + cnt));\n     }\n     squares.push(<div key={i} className=\"board-row\">{row}</div>);\n    }\n    return squares;\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null),\n        move: null,\n      }],\n      xIsNext: true,\n      stepNumber: 0,\n      isReversed: false,\n      isDraw: false,\n    };\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0,\n    });\n  }\n\n  toggleOrder() {\n    this.setState({\n      isReversed: !this.state.isReversed\n    })\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    const results = calculateWinner(current.squares);\n    let winner = null;\n    let winning_row = null;\n    if (results) {\n      winner = results['winner'];\n      winning_row = results['winning_row'];\n    }\n    if (squares[i] || winner) {\n      return;\n    }\n    if (squares[i]) {\n      this.setState({draw: true});\n    }\n    const row = Math.ceil((i + 1) / 3);\n    const col = i % 3 + 1;\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares,\n        move: col + ', ' + row,\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const results = calculateWinner(current.squares);\n    const draw = this.state.isDraw;\n    let winner = null;\n    let winning_row = null;\n    if (results) {\n      winner = results['winner'];\n      winning_row = results['line'];\n    }\n    if (results) {\n      winner = calculateWinner(current.squares)['winner'];\n    }\n    const reversed = this.state.isReversed;\n    let status;\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else if (draw) {\n      status = 'Draw!'\n    }\n     else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    const moves = history.map((step, move) => {\n      const desc = move ?\n        'Go to move #' + move :\n        'Go to game start';\n      let loc;\n      if (step.move) {\n        loc = 'Loc: ' + step.move\n      }\n      let active;\n      if (this.state.stepNumber === move) {\n        active = 'active';\n      }\n\n      return (\n        <li key={move}>\n          <button className={active} onClick={() => this.jumpTo(move)}>{desc}</button>\n          &nbsp; {loc}\n        </li>\n      );\n    });\n\n    if (reversed) {\n      moves.reverse();\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            onClick={(i) => { this.handleClick(i) }}\n            winners={winning_row}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{moves}</ol>\n          <button onClick={() => this.toggleOrder()}>Re-order</button>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n/*ReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);*/\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      let winning_results = {};\n      winning_results['winner'] = squares[a];\n      winning_results['line'] = lines[i];\n      return winning_results;\n    }\n  }\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}